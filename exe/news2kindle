#!/usr/bin/env ruby
#
# news2kindle: scraping news sites and generate kindle document
#
# Copyright (C) 2017 by TADA Tadashi <t@tdtds.jp>
# Distributed under GPL
#

require 'news2kindle'
require 'optparse'
require 'open-uri'
require 'yaml'

module News2Kindle

	class CLI
		def run
			conf, tasks = parse_options
			News2Kindle.logger.level = Logger::DEBUG if conf[:verbose]

			tasks.each do |name|
				task = conf[:tasks][name]
				usage("task '#{name}' not found") unless task

				task[:media].each do |media|
					begin
						News2Kindle.logger.info "starting #{media}..."
						Task::new(media).run(task[:receiver], conf[:sender], conf)
					rescue
						News2Kindle.logger.fatal($!)
						raise
					end
				end
			end
		end

	private
		def parse_options(argv = ARGV)
			op = OptionParser.new

			self.class.module_eval do
				define_method(:usage) do |msg = nil|
					puts op.to_s
					puts "error: #{msg}" if msg
					exit 1
				end
			end

			opts = {
				now: Time::now,
				verbose: false
			}

			op.on('-C', '--config VALUE', "configuration file") do |v|
				usage("#{v} is not existent") unless Pathname(v).expand_path.exist?
				opts[:config] = v
			end
			op.on('-s', '--sender VALUE', "sender e-mail address") do |v|
				opts[:sender] = v
			end
			op.on('-V', '--verbose', "print verbose messages") do |v|
				opts[:verbose] = true
			end

			op.banner += ' TASK1 [TASK2...]'
			begin
				args = op.parse(argv)
			rescue OptionParser::InvalidOption => e
				usage e.message
			end

			begin
				config_files = [opts[:config], './news2kindle.yaml', '~/.news2kindle']
				conf = YAML::load_file(config_files.find {|c|
					Pathname(c).expand_path.exist? rescue false
				}).merge(opts)
			rescue TypeError
				usage 'needs configuration file ./news2kindle.yaml or ~/.news2kindle'
			rescue 
				usage "unable read configuration file (#{config_file})"
			end

			if args.size < 1
				usage 'needs some tasks'
			end
			[conf, args]
		end
	end
end

News2Kindle::CLI.new.run
